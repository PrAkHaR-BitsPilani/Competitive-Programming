#include<vector>
#include <climits>
#include<iostream>
using namespace std;
class Binary_Heap {

public:
    int size;
    vector<int>arr;
    int comp;
    Binary_Heap(int Max_Heap_1_Min_Heap_0) {
        this->size = 0;
        this->comp = Max_Heap_1_Min_Heap_0;
    }
    int getParent(int i) {
        return (int) (i - 1) / 2;
    }
    int getLeftChild(int i) {
        return 2 * i + 1;
    }
    int getRightChild(int i) {
        return 2 * (i + 1);
    }
    bool check(int i, int j) {
        if (comp == 1)
            return i > j;
        else
            return i < j;
    }
    void swap_val(int i, int j) {
        swap(arr.at(i), arr.at(j));
    }
    void shiftUp(int i) {
        if (i > 0) {
            int par_index = getParent(i);
            if (check(arr[i], arr[par_index])) {
                swap_val(par_index, i);
                shiftUp(getParent(i));
            }

        }
    }
    void shiftDown(int i) {
        int max_index = i;
        int temp = getLeftChild(i);
        if (temp < size && check(arr[temp], arr[max_index]))
            max_index = temp;
        temp = getRightChild(i);
        if (temp < size && check(arr[temp], arr[max_index]))
            max_index = temp;
        if (max_index != i) {
            swap_val(i, max_index);
            shiftDown(max_index);
        }

    }
    void insert(int x) {
        arr.insert(arr.begin() + size, x);
        size++;
        shiftUp(size - 1);

    }
    int extract_Max_Priority() {
        int result = arr[0];
        arr[0] = arr[size - 1];
        size--;
        shiftDown(0);
        return result;
    }
    int remove(int i) {
        arr[i] = INT_MAX;
        shiftUp(i);
        extract_Max_Priority();
        return 1;
    }
    void changePriority(int index,int new_priority)
    {
        int old_priority = arr[index];
        arr[index] = new_priority;
        if(check(new_priority,old_priority))
            shiftUp(index);
        else
            shiftDown(index);
    }
};


